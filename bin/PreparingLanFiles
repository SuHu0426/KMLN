#! /bin/bash

CWD=`pwd`
SrcDir="/src4/mln"
cd ${SrcDir}
ProjFile="${SrcDir}/projects/${1}/${1}.mln"

# Sole argument: Project File PathName relative to mln directory.
if [ $# != 1 ]
   then echo "Usage: $0 ProjectName"
        echo "This program writes the project's start_lan.sh and stop_lan.sh scripts."
        echo "It parses Project specification File to obtain information it needs."
        exit 1
fi

if [ ! -d ${SrcDir}/projects/${ProjName} ]
  then echo "You must build ${ProjName} project, first!"
       exit 2
fi


if [ ! -f ${ProjFile} ]
   then echo "File: ${ProjFile} does not exist. Perhaps, you should " 
        echo "build your project first. Or check project name or name of project"
        echo "specification (*.mln) file carefully!"
        exit 3
fi

# Get the project name
ProjName=`mln parse -f ${ProjFile} -S /global/project`
if [ "x${1}" != "x${ProjName}" ]
  then echo "The project name inconsistent error: ${1} ${ProjName}, quit"
       exit 4
fi

USER=`whoami`
HeadNode=`hostname`
# We need all the physical hosts where our uml clients are running.
# If not specified, SerHosts is the current host.
SerHosts=`mln parse -f ${ProjFile} -H /host | grep service_host | sort | uniq | cut -d' ' -f 2`

if [ -n "${SerHosts}" ];    
  then echo ${SerHosts};
else 
  SerHosts=`hostname` 
  echo "Using Default SerHost: ${SerHosts}";   
fi

# For each physical host, get the uml names will run on it.
for host in `echo ${SerHosts}`
  do 
    ssh ${host} "cd ${SrcDir}/projects/${ProjName}; ls start_99*" >/tmp/${host}.$$
    cat /tmp/${host}.$$  | sed s/start_99_// | sed s/.sh// | tee /tmp/UMLs.${host}.$$
  done

# Get the switch command argument for the virtual lan: Such as "tap tap0"
SwchArg=`mln parse -f ${ProjFile} -A /switch/lan`
if [ -n "${SwchArg}" ];    
  then echo "Argument of uml-switch: ${SwchArg}"
else 
  SwchArg="tap tap0"
  echo "Warning: You didn't specify TAP argument for uml-switch command"
  echo "Take the default: ${SwchArg}"
fi

TAP=`echo ${SwchArg} | cut -d' ' -f 2`
echo "Will using ${TAP} device"

for host in `echo ${SerHosts}`
  do 
     StartFile="${SrcDir}/projects/${ProjName}/start_lan.sh.${host}"
     StopFile="${SrcDir}/projects/${ProjName}/stop_lan.sh.${host}"
     UMLs=`cat /tmp/UMLs.${host}.$$`
     FirstUml=`echo ${UMLs} | cut -d' ' -f 1`
     IFace=`echo $(mln parse -f ${ProjFile} -H /host/${FirstUml}/network) | cut -f 1 -d' '`

     # Preparing Start_lan script
     echo "#! /bin/bash" >${StartFile}
     echo "" >>${StartFile}
     echo "# File automatically generated by PreparingLanFiles script" >>${StartFile}
     echo "sudo echo Need SU passwd:" >>${StartFile}
     echo "sudo chmod 666 /dev/net/tun" >>${StartFile}
     echo "sudo tunctl -u hsu -t ${TAP}" >>${StartFile}
     HostIP=`ssh ${host} "cd ${SrcDir}/bin; ./getIP eth1"`
     echo "sudo ifconfig ${TAP} ${HostIP} netmask 255.255.255.255 up" >>${StartFile}

     # This restricts the IFace to be one and only one.
     echo "sudo iptables --table nat -A POSTROUTING --out-interface ${IFace} -j MASQUERADE" >>${StartFile}
     echo "sudo iptables -A FORWARD --in-interface ${TAP} -j ACCEPT" >>${StartFile}
     echo "sudo chmod 666 /dev/net/tun # First only get 660" >>${StartFile}
     echo "sudo sysctl net.ipv4.ip_forward=1" >>${StartFile}
     echo "sudo sysctl net.ipv4.conf.${TAP}.proxy_arp=1" >>${StartFile}

     # Preparing Stop_lan script

     echo "#!/bin/sh" >${StopFile}

     echo "sudo echo Need SU passwd:" >>${StopFile}
     echo "" >>${StopFile}
     echo "# File automatically generated by PreparingLanFiles script" >>${StopFile}
     echo "echo 'Stopping swich lan'" >>${StopFile}
     echo "" >>${StopFile}
     echo "# Killing the uml_switch daemon process of ${ProjName}" >>${StopFile}
     echo "sudo pkill -f \"\-unix ../${ProjName}/network/lan\"" >>${StopFile}
     echo "" >>${StopFile}
     echo "# Removing the socket" >>${StopFile}
     echo "if [ -S ./network/lan ]; then rm ./network/lan; fi" >>${StopFile} 
     echo "" >>${StopFile}
     echo "echo \"Restore lan...\"" >>${StopFile}
     echo "sudo chmod 600 /dev/net/tun" >>${StopFile}
     echo "sudo sysctl net.ipv4.ip_forward=0" >>${StopFile}
     echo "sudo sysctl net.ipv4.conf.${TAP}.proxy_arp=0" >>${StopFile}
     echo "sudo ifconfig ${TAP} ${HostIP} down" >>${StopFile}
     echo "sudo iptables --table nat -D POSTROUTING --out-interface ${IFace} -j MASQUERADE" >>${StopFile}
     echo "sudo iptables -D FORWARD --in-interface ${TAP} -j ACCEPT" >>${StopFile}
    
     echo "sudo chmod 666 ${SrcDir}/Ip-Occupied" >>${StartFile}
     echo "sudo chmod 666 ${SrcDir}/Ip-Occupied" >>${StopFile}
     for eachUml in `echo ${UMLs}`
       do 
        # Get the network Interface device for each uml
          IFace=`echo $(mln parse -f ${ProjFile} -H /host/${eachUml}/network) | cut -f 1 -d' '`
        # Get the assigned address of the network Interface 
          Addr=`mln parse -f ${ProjFile} -S /host/${eachUml}/network/${IFace}/address`

          echo "sudo arp -Ds ${Addr} ${IFace} pub" >>${StartFile}
          echo "sudo route add -host ${Addr} dev ${TAP}" >>${StartFile}
          echo "echo ${Addr} >>${SrcDir}/Ip-Occupied" >>${StartFile}
          echo "sudo route del -host ${Addr} dev ${TAP}" >>${StopFile}
          echo "sudo arp -d ${Addr}" >>${StopFile}
          echo "cat ${SrcDir}/Ip-Occupied | sed '/^${Addr}$/d' | tee /tmp/Ip-Occupied" >>${StopFile}
          echo "sudo cp /tmp/Ip-Occupied ${SrcDir}/Ip-Occupied" >>${StopFile} 

       done

     echo "echo \"Starting uml_switch...\"" >>${StartFile}
     echo "# Use ${ProjName} to identify uml_switch daemon to kill" >>${StartFile}
     echo "OPTIONS=\"-${SwchArg} -unix ../${ProjName}/network/lan\"" >>${StartFile}
     echo "uml_switch \$OPTIONS -daemon </dev/null >/dev/null" >>${StartFile}
     echo "sudo chown ${USER}:${USER} ./network/lan" >>${StartFile}
     echo "sudo chmod 444 ${SrcDir}/Ip-Occupied" >>${StartFile}
     echo "sudo chmod 444 ${SrcDir}/Ip-Occupied" >>${StopFile}
     echo "sudo tunctl -d ${TAP}" >>${StopFile}
     chmod 755 ${StartFile}
     chmod 755 ${StopFile}
  done

cd ${CWD}
